"""
Задание 1.
Реализуйте:
a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.
b) выполните со списком и словарем операции: изменения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.
ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

#a) 
#Так как переодически время выполнения кода отображалось не совсем корректно, пришлось использовать знания из теории

import time

def time_check(func):
    def wrapper():
        start = time.time()
        func()
        print(time.time() - start, "секунд")

    return wrapper()


@time_check
def list_filling():  # O(1)
    list_example = [a for a in range(1000)]
    print(list_example)



@time_check
def dict_filling():  # O(1)
    dict_example = {a: a for a in range(1000)}
    print(dict_example)

#Сложность заполнения словаря и списка одинакова, однако словарь заполняется дольше, так как он является хеш-таблицей и
#заполнение происходит по ключу. Время тратиться на создание хэша ключей

#b)
list_example = [i for i in range(1000)]
dict_example = {i: i for i in range(1000)}

#Изменение

@time_check
def list_change(): #O(1)
    for i in range(1000):
        list_example[i] = 0
    print(list_example)

@time_check
def dict_change(): #O(1)
    for i in range(1000):
        dict_example[i] = 1
    print(dict_example)


#удаление

@time_check
def list_delete(): #O(1)
    for i in range(1000):
        list_example.pop()
    print(list_example)


@time_check
def dict_delete(): #O(1)
    for i in range(1000):
        dict_example.pop(i)
    print(dict_example)

"""
Изменение словаря и списка имеет одинаковую сложность и выполняется одинаково по времени.
При удалении каждого значения из списка, просиходит его обновление, так как для списка важен индекс, который получается после удаления. Из словаря
удаление происходит по ключу и индекс в данном случае неважен. Поэтому удаление из словаря происходит быстрее, чем удаление из списка. 
"""