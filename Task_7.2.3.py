"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.
Решите задачу тремя способами:
3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов
В конце сделайте аналитику какой трех из способов оказался эффективнее
"""

from timeit import timeit
from random import randint
from statistics import median


def find_median(obj):
    return median(obj)


m=10
my_list_10 = [randint(0, 100) for x in range(2*m+1)]
print(f'Время выполнения кода c m=10: {timeit("find_median(my_list_10[:])", globals=globals(), number=1000)}')

m = 100
my_list_100 = [randint(0, 100) for x in range(2*m+1)]
print(f'Время выполнения кода c m=100: {timeit("find_median(my_list_100[:])", globals=globals(), number=1000)}')

m = 1000
my_list_1000 = [randint(0, 100) for x in range(2*m+1)]
print(f'Время выполнения кода c m=1000: {timeit("find_median(my_list_1000[:])", globals=globals(), number=1000)}')

"""
Результаты:
Время выполнения кода c m=10: 0.0006566000000000002
Время выполнения кода c m=100: 0.005906400000000006
Время выполнения кода c m=1000: 0.13860409999999998

Самый быстрый и оптимальный способ - третий, с использованием встроенной функции поиска медианы. Если при небольших
массивах замеры времени были примерно одинаковыми, то при большом массиве данных (на 1000) третий способ занимает 
гораздо меньше времени, чем остальные.
"""
