from memory_profiler import profile


"""
Из Task_2.3 
Задание 3.	Сформировать из введенного числа
обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
то надо вывести число 6843.
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. Решение через цикл не принимается.
Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321
Не забудьте проверить на числе, которое оканчивается на 0.
1230->3210
"""
#было:
count = int(input('Введите число, которое хотите перевернуть: '))
original_count = count

@profile
def count_recur(count, new_number=[]):
    if count == 0:
        print(f'Ваше изначальное число: {original_count}, перевернутое: {"".join((map(str, new_number)))}')
    else:
        reversed_number = count % 10
        count = count // 10
        new_number.append(reversed_number)
        return count_recur(count, new_number)

count_recur(count)



#Стало:

count = input('Введите число, которое хотите перевернуть: ')
original_count = count

@profile
def count_recur1(count, new_number = []):
    for i in count:
        new_number.append(i)
    print(f'Ваше изначальное число: {original_count}, перевернутое: {"".join((map(str, new_number[::-1])))}')

count_recur1(count)

"""
Замена рекурсии на цикл, что требует меньшее количество памяти. В решении с рекурсией при профилировании отображалось
несколько таблиц (count + 1). В решении с циклом отображается только одна таблица.
"""